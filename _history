{"entries":[{"timestamp":1747641665814,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n"],[0,"</xm"]],"start1":12,"start2":12,"length1":70,"length2":113}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"main.py\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"pyprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":215,"start2":215,"length1":108,"length2":44}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"main.py","value":"from microbit import *\n\n# Initialize the chessboard\nboard = [[' ' for _ in range(5)] for _ in range(5)]\n# Place a pawn at the starting position\nboard[4][2] = 'P'  # Pawn for player 1\n\n# Function to display the board on the micro:bit\ndef display_board():\n    for y in range(5):\n        for x in range(5):\n            if board[y][x] == 'P':\n                display.set_pixel(x, y, 9) # Brightness for pawn\n            else:\n                display.set_pixel(x, y, 0)  # Clear pixel\n\n# Initial display\ndisplay_board()\n\n# Starting position of the pawn\npawn_x, pawn_y = 2, 4\n\nwhile True:\n    if button_a.is_pressed() and pawn_x > 0:  # Move left\n        board[pawn_y][pawn_x] = ' '  # Clear current position\n        pawn_x -= 1\n        board[pawn_y][pawn_x] = 'P'  # Move pawn left\n        display_board()\n        sleep(500)  # Debounce delay\n\n    elif button_b.is_pressed() and pawn_x < 4:  # Move right\n        board[pawn_y][pawn_x] = ' '  # Clear current position\n        pawn_x += 1\n        board[pawn_y][pawn_x] = 'P'  # Move pawn right\n        display_board()\n        sleep(500)  # Debounce delay\n\n    if accelerometer.was_gesture(\"up\") and pawn_y > 0:  # Move up\n        board[pawn_y][pawn_x] = ' '  # Clear current position\n        pawn_y -= 1\n        board[pawn_y][pawn_x] = 'P'  # Move pawn up\n        display_board()\n        sleep(500)  # Debounce delay\n\n    elif accelerometer.was_gesture(\"down\") and pawn_y < 4:  # Move down\n        board[pawn_y][pawn_x] = ' '  # Clear current position\n        pawn_y += 1\n        board[pawn_y][pawn_x] = 'P'  # Move pawn down\n        display_board()\n        sleep(500)  # Debounce delay\n\n"}]}],"snapshots":[{"timestamp":1747641665813,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"niga\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1747642263990}